generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Music {
  id        String    @id @default(uuid())
  musicUrl  String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  Invitation Invitation[]

  @@map("musics")
  @@index([musicUrl]) // Indeks pada musicUrl untuk pencarian lebih cepat
}

model Comment {
  id           String    @id @default(uuid())
  invitationId String
  name         String
  text         String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  deletedAt    DateTime?

  Invitation Invitation @relation(fields: [invitationId], references: [id], onDelete: Cascade)

  @@map("comentars")
  @@index([invitationId]) // Indeks pada invitationId untuk mempercepat join dan pencarian berdasarkan invitationId
}


model BrideGroom {
  id                 String    @id @default(uuid())
  invitationId       String
  nameGroom          String
  imageGroom         String
  parentGroom        String
  linkInstagramGroom String?
  linkFbGroom        String?
  linkTwitterGroom   String?
  linkYtbGroom       String?
  nameBride          String
  imageBride         String
  parentBride        String
  linkInstagramBride String?
  linkFbBride        String?
  linkTwitterBride   String?
  linkYtbBride       String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime? @updatedAt
  deletedAt          DateTime?

  Invitation Invitation @relation(fields: [invitationId], references: [id], onDelete: Cascade)

  @@map("brides and grooms")
  @@index([invitationId]) // Indeks pada invitationId untuk mempercepat join dengan tabel Invitation
}

model Event {
  id                String    @id @default(uuid())
  invitationId      String
  nameEvent         String
  location          String
  address           String
  dateEvent         DateTime
  startTime         DateTime
  endTime           DateTime
  linkNavigationMap String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deletedAt         DateTime?

  Invitation Invitation @relation(fields: [invitationId], references: [id], onDelete: Cascade)

  @@map("events")
  @@index([invitationId]) // Indeks pada invitationId untuk mempercepat pencarian berdasarkan invitationId
}


model PaymentTransaction {
  id              String   @id @default(uuid())
  userId          String
  designId        String
  paymentMethod   String   @default("dana")
  amount          Decimal
  paymentStatus   String   @default("pending")
  transactionDate DateTime @default(now())
  Design          Design    @relation(fields: [designId], references: [id], onDelete: Cascade) // Buat relasi opsional
  User         User    @relation(fields: [userId], references: [id], onDelete: Cascade) // Buat relasi opsional

  @@map("payment_transactions")
  @@index([paymentStatus]) 
}

model Rsvp {
  id                 String    @id @default(uuid())
  invitationId       String
  guestName          String    @unique
  numberOfPeople     Int       @default(1)
  confirmationStatus String?    @default("belum konfirmasi")
  customLink String?            @default("www.com") 
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  deletedAt          DateTime?

  Invitation Invitation @relation(fields: [invitationId], references: [id], onDelete: Cascade)

  @@map("rsvps")
  @@index([invitationId]) // Indeks pada invitationId untuk mempercepat pencarian RSVP berdasarkan invitationId
}

model Invitation {
  id                 String               @id @default(uuid())
  name               String               @default("Pernikahan Kirito dan Asuna")
  userId             String
  designId           String               @unique
  qouteId            String?
  musicId            String?
  link               String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  deletedAt          DateTime?
  User               User                 @relation(fields: [userId], references: [id])
  Design             Design?               @relation(fields: [designId], references: [id])
  Music              Music?                @relation(fields: [musicId], references: [id])
  Quote              Quote?                @relation(fields: [qouteId], references: [id])
  Comment            Comment[]
  BrideGroom         BrideGroom[]
  Event              Event[]
  Rsvp               Rsvp[]
  Gift               Gift[]
  LoveStory          LoveStory[]
  Setting            Setting[]
  Gallery            Gallery[]

  @@index([userId]) // Indeks pada userId untuk mempercepat pencarian berdasarkan user
  @@index([link]) // Indeks pada link untuk mempercepat pencarian berdasarkan link
  @@map("invitations")
}

model Quote {
  id        String    @id @default(uuid())
  content   String
  author    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  Invitation Invitation[]

  @@map("Quotes")
}

model Design {
  id           String       @id @default(uuid())
  name         String
  price        Float
  imageUrl     String
  templateName String
  category     String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  deletedAt    DateTime?
  Invitation   Invitation[]
  Review       Review[]
  PaymentTransaction PaymentTransaction[]

  @@map("designs")
}

model Gift {
  id           String    @id @default(uuid())
  invitationId String
  nameUserAccount  String @default("budi geming")
  nameAccount String      @default("dana")
  noAccount    String
  imgAccount   String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  Invitation Invitation @relation(fields: [invitationId], references: [id], onDelete: Cascade)

  @@map("gifts")
}

model LoveStory {
  id           String    @id @default(uuid())
  invitationId String
  title        String
  story        String
  imageUrl     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  Invitation Invitation @relation(fields: [invitationId], references: [id], onDelete: Cascade)

  @@map("love_storys")
}

model Setting {
  id           String    @id @default(uuid())
  invitationId String
  title        String    @default("Pernikahan")
  textPembuka  String    @default("Assalamualaikum")
  textAcara    String    @default("Pernikahan Awal")
  textPenutup  String    @default("Pernikahan Akhir")
  broadcast    String    @default("Halo semuanya...")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  Invitation Invitation @relation(fields: [invitationId], references: [id], onDelete: Cascade)

  @@map("settings")
}

model Gallery {
  id           String    @id @default(uuid())
  invitationId String
  imageUrl     String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  Invitation Invitation @relation(fields: [invitationId], references: [id], onDelete: Cascade)

  @@map("galerys")
}

model User {
  id            String       @id @default(uuid())
  name          String
  email         String       @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String       @default("USER")
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  deletedAt     DateTime?
  PaymentTransaction PaymentTransaction[]
  Invitation    Invitation[]
  accounts      Account[]
  sessions      Session[]

  @@map("Users")
  @@index([email]) // Indeks pada email untuk mempercepat pencarian berdasarkan email
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Review {
  id           String    @id @default(uuid())
  designId String
  rate         Int
  comment      String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  Design Design @relation(fields: [designId], references: [id], onDelete: Cascade)

  @@map("reviews")
  @@index([designId]) // Indeks pada invitationId untuk mempercepat pencarian review berdasarkan invitationId
}

